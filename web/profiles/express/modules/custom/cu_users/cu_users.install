<?php

/**
 * Implements hook_install().
 *
 * Creates a set of default users with specified roles.
 */
function cu_users_install() {
  // High module weight in order to come after every module that we declare
  // permissions for.
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'cu_users'");

  $developer_role = user_role_load_by_name('developer');
  $administrator_role = user_role_load_by_name('administrator');
  $site_owner_role = user_role_load_by_name('site_owner');
  $content_editor_role = user_role_load_by_name('edit_only');
  $edit_own_role = user_role_load_by_name('edit_my_content');

  // Create default users keyed by role id.
  $default_users = array(
    $developer_role->rid => cu_users_get_users('developer'),
    $administrator_role->rid => cu_users_get_users('administrator'),
	  $site_owner_role->rid => cu_users_get_users('site_owner'),
    $content_editor_role->rid => cu_users_get_users('edit_only'),
	  $edit_own_role->rid => cu_users_get_users('edit_my_content'),
  );

  foreach ($default_users as $rid => $users) {
    foreach ($users as $name => $mail) {
      // Create the account.
      $account = new stdClass();
      $account->name = $name;
      $account->mail = $mail;
      $account->status = 1;
      $account = user_save($account);

      // Grant user the role.
      $query = db_insert('users_roles')->fields(array('uid', 'rid'));
      $query->values(array('uid' => $account->uid, 'rid' => $rid));
      $query->execute();
    }
  }
}

/**
 * Set module weight for pre-1.0 sites.
 */
function cu_users_update_7010() {
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'cu_users'");
  return TRUE;
}

/**
 * Create administrator drupalcs user and change sniderc's role to developer.
 */
function cu_users_update_7011() {
  // Do not create new drupalcs user.

  // Remove administrator role from sniderc.
  $sniderc_account = user_load_by_name('sniderc');
  $query = db_delete('users_roles')
    ->condition('uid', $sniderc_account->uid)
    ->condition('rid', $administrator_role->rid)
    ->execute();

  // Do not grant developer role to sniderc's account.

}

/**
 * Create table for user invites.
 */
function cu_users_update_7012() {
  drupal_install_schema('cu_users');
}

/**
 * Add Erin Corson as a developer.
 */
function cu_users_update_7013() {
  // No longer adding erco7194
}

/**
 * Add Kevin Reynen as a developer.
 */
function cu_users_update_7016() {
  // Intentionally empty.
}

/**
 * Add James Fuller as a developer.
 */
function cu_users_update_7017() {
  // No longer adding jafu6031
}

/**
 * Set role weight by increasing permissions so site_owner and admin are easier to compare
 */
function cu_users_update_7018() {

  $role = user_role_load_by_name('edit_only');
  $role->weight = 2;
  user_role_save($role);

  $role = user_role_load_by_name('site_owner');
  $role->weight = 3;
  user_role_save($role);

  $role = user_role_load_by_name('administrator');
  $role->weight = 4;
  user_role_save($role);

  $role = user_role_load_by_name('developer');
  $role->weight = 5;
  user_role_save($role);

}

/**
 * Breaking module up into 3; renaming cu_users_invite table to user_external_invite
 */
function cu_users_update_7019() {
  if (db_table_exists('cu_users_invite')) {
    db_rename_table('cu_users_invite', 'user_external_invite');
  }
  // Enable new modules
  module_enable(array(
    'user_external_invite',
    'cu_permissions',
  ));
}

/**
 * Remove Erin Corson and Matt Tucker as a users
 */
function cu_users_update_7021() {
  // Intentionally empty.
}

/**
 * Add Alex Finnarn as a developer.
 */
function cu_users_update_7022() {
  // Intentionally empty.
}

/**
 * Add test users for edit-my-content, content-editor and site-owner
 */
function cu_users_update_7023() {
  // If edit-own-content user does not exist.
  $new_account = user_load_by_name('osr-test-edit-own');
  if (!isset($new_account->uid)) {
    // Create new edit-own-content user.
    $account = new stdClass();
    $account->name = 'osr-test-edit-own';
    $account->mail = 'osr-test-edit-own@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    $edit_own_role = user_role_load_by_name('edit_my_content');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $edit_own_role->rid));
    $query->execute();
  }

   // If content-editor user does not exist.
  $new_account = user_load_by_name('osr-test-content');
  if (!isset($new_account->uid)) {
    // Create new content-editor user.
    $account = new stdClass();
    $account->name = 'osr-test-content';
    $account->mail = 'osr-test-content@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    $content_editor_role = user_role_load_by_name('edit_only');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $content_editor_role->rid));
    $query->execute();
  }

   // If site-owner user does not exist.
  $new_account = user_load_by_name('osr-test-owner');
  if (!isset($new_account->uid)) {
    // Create new site-owner user.
    $account = new stdClass();
    $account->name = 'osr-test-owner';
    $account->mail = 'osr-test-owner@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    $site_owner_role = user_role_load_by_name('site_owner');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $site_owner_role->rid));
    $query->execute();
  }
}

/**
 * Update user_external_invite email template for when invite is first sent.
 */
function cu_users_update_7025() {
  variable_set('user_external_invite_confirmation_template', 'We have received your request to grant [user_external_invite:invite_role] access to the following users:

[user_external_invite:invited_emails]

An email invitation has been sent requesting the user to login to [site:url] and accept the invitation. Upon completion, a confirmation email will be sent.

If you did not submit this request or need to modify it, please contact us at websupport@colorado.edu.

--
The Web Express Team
http://www.colorado.edu/webcentral
websupport@colorado.edu');
}

/**
 * Add Jesus Ortiz Tovar as a developer.
 */
function cu_users_update_7026() {
  // No longer adding jeor0980

}

/**
 * Delete user URL aliases and redirects.
 */
function cu_users_update_7027() {
  db_delete('url_alias')
    ->condition('source', db_like('user/') . '%', 'LIKE')
    ->execute();

  db_delete('redirect')
    ->condition('source', db_like('users/') . '%', 'LIKE')
    ->execute();
}

/**
 * Re-add invite roles for 2.9.0 additions.
 */
function cu_users_update_7028() {

  module_load_install('cu_core');
  _set_external_invite_variables();
}

/**
 * Increase module weight so that cu_users_pathauto_pattern_alter() happens in the correct order.
 */
function cu_users_update_7029() {
  // High module weight in order to come after every module that we declare
  // permissions for.
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'cu_users'");
}

/**
 * Correct invite email templates for addon role code changes.
 */
function cu_users_update_7030() {
  module_load_install('cu_core');
  _set_external_invite_variables();
}

/**
 * Correct invite email templates for login link.
 */
function cu_users_update_7031() {
  module_load_install('cu_core');
  _set_external_invite_variables();
}

/**
 * Remove Owen Morrill as a user, if he exists.
 */
function cu_users_update_7032() {
  $user = user_load_by_name('owmo7772');
  if($user){
    user_cancel(array(), $user->uid, 'user_cancel_reassign');
  }
  watchdog('cu_users', t('Removed owmo7772 from list of users on sites'));
}

/**
 * Add Jeremy Sparks, Michael Bolei as developers.
 */
function cu_users_update_7033() {
  // If jesp3304 user does not exist. (Jeremy Sparks)
  $new_account = user_load_by_name('jesp3304');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'jesp3304';
    $account->mail = 'Jeremy.Sparks@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    $developer_role = user_role_load_by_name('developer');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $developer_role->rid));
    $query->execute();
  }

  // If mibo7729 user does not exist. (Michael Bolei)
  $new_account = user_load_by_name('mibo7729');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'mibo7729';
    $account->mail = 'Michael.Bolei@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    $developer_role = user_role_load_by_name('developer');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $developer_role->rid));
    $query->execute();
  }
}

/**
 * Remove developer role from developers who have departed (Alex Finnarn; Kevin Reynen)
 */
function cu_users_update_7034() {
  // Alex Finnarn; Kevin Reynen.
  $users = array('alfi2595', 'kere7580');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('developer', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Remove developer role from developers who have departed (Christina Morris)
 */
function cu_users_update_7035() {
  // Christina Morris.
  $users = array('chmo0919');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('developer', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Remove admin role from Jon Leslie)
 */
function cu_users_update_7036() {
  $users = array('leslie');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('administrator', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Add Alan Cole, Brooke Stevens as developers.
 */
function cu_users_update_7037() {
  // If alco6164 user does not exist. (Alan Cole)
  $new_account = user_load_by_name('alco6164');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'alco6164';
    $account->mail = 'Alan.Cole@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    $developer_role = user_role_load_by_name('developer');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $developer_role->rid));
    $query->execute();
  }

  // If brst4163 user does not exist (Brooke Stevens).
  // code removed; no longer adding brst4163.
  //
}

/**
 * Enabling Masquerade module.
 */
function cu_users_update_7038() {
  module_enable(array('masquerade'));
}

/**
 * Remove developer role from developers who have departed (James Fuller)
 */
function cu_users_update_7039() {
  $users = array('jafu6031');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('developer', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Remove developer role from developers who have departed (Jesus Ortiz)
 */
function cu_users_update_7040() {
  $users = array('jeor0980');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('developer', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Remove developer role from developers who have departed (Cathy Snider)
 */
function cu_users_update_7041() {
  $users = array('sniderc');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('developer', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Remove developer role from developers who have departed (Brooke Stevens)
 */
function cu_users_update_7042() {
  $users = array('brst4163');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      if (($key = array_search('developer', $user->roles)) !== FALSE) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}

/**
 * Remove roles from Emily
 */
function cu_users_update_7043() {
  $users = array('mortone');
  foreach ($users as $username) {
    $user = user_load_by_name($username);
    if ($user) {
      foreach ($user->roles as $key => $role) {
        unset($user->roles[$key]);
      }
      user_save($user);
    }
  }
}
/**
 * Add David, Kristin, and Nicole as admins.
 */
function cu_users_update_7044() {
  $users = array(
    'niwa4700' => 'nicole.waldrip@colorado.edu',
    'krag4316' => 'kristin.agnes@colorado.edu',
    'dadu0810' => 'david.depuy@colorado.edu',
  );

  foreach ($users as $id => $email) {
    $new_account = user_load_by_name($id);
    if (!isset($new_account->uid)) {
      // Create new user.
      $account = new stdClass();
      $account->name = $id;
      $account->mail = $email;
      $account->status = 1;
      $account = user_save($account);

      $administrator_role = user_role_load_by_name('administrator');
      $query = db_insert('users_roles')->fields(array('uid', 'rid'));
      $query->values(array('uid' => $account->uid, 'rid' => $administrator_role->rid));
      $query->execute();
    }
  }
}
